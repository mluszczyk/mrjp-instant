# Instant compiler

This is my solution to the first assignment on the compilers course (MRJP) at
University of Warsaw.

Presented is a compiler of a toy language called Instant to LLVM and JVM
bytecodes.

## Compilation

stack build

Makefile is configured to do this, too.

## Running

stack exec compile llvm <file.ins> > out.ll
stack exec compile jvm <file.ins> > out.j

Convenience scripts ./insc_llvm and ./insc_jvm defined as in the task objective.

## Dependencies

The project heavily relies on stack (packaging toolÂ for Haskell). The additional
bash scripts ./insc_llvm and ./insc_jvm use jasmin, clang and sed.

The parsing code is generated using BNFC, but it is not necessary for
compilation or for running.

## Project structure

The starting point is instant.cabal file, further pointers can be found there.

## Optimisations

As per assignment objective, only selected optimisations are performed. LLVM
code is not optimised at all. JVM compiler optimises stack height. For binary
operations like +, -, *, / and also printing (which consists of getstatic ...
and then invokevirtual ...), the operand requiring deeper stack is calculated
first, its result is stored on the stack and only then is calculated the other
operand. If necessary (non-commutative operators), a swap statement is added.
Moreover, different statements are used to push a constant number to the stack.
const_* statements are used whenever possible, bipush is used for numbers
fitting one byte and ldc for the rest.
