

module AbsInstant where

-- Haskell module generated by the BNF converter




newtype CIdent = CIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
data Program = Prog [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt = SAss CIdent Exp | SExp Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = ExpAdd Exp Exp
    | ExpSub Exp Exp
    | ExpMul Exp Exp
    | ExpDiv Exp Exp
    | ExpLit Integer
    | ExpVar CIdent
  deriving (Eq, Ord, Show, Read)

